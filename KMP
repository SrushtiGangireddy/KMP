import java.io.*;
import java.util.*;

public class Solution {
    public static void main(String args[])
	    {
	        Scanner sc = new Scanner(System.in);
	      
	        int n = sc.nextInt();
	        
	        for(int i=0;i<n;i++) {
	        	
	        	String word = sc.next();
	    
	        	
	        	if(word.length() <= 1) {
	        		System.out.println(word.length());
	        	}else {
	        		
	        		for(int j=1;j<word.length();j++) {
	        			String sub = word.substring(0, j);
	        			//System.out.println(sub);
	        			ArrayList<Integer> ocr = KMPSearch(sub,word);
	        			int k = 0;
	        			String test = "";
	        			for(k=0;k<ocr.size();k++) {
	        				test += sub;
	        			}
                        if(test.equals(word.substring(0,ocr.get(ocr.size()-1)+sub.length()))){
                            System.out.println(sub.length());  
                            break;
                        }
	        		}
	        		
	        		
	        	}
	        	
	        	
	        }
	        
	        
	    }
	    
	    public static ArrayList<Integer> KMPSearch(String pat, String txt)
	    {
	        int M = pat.length();
	        int N = txt.length();
	        ArrayList<Integer> ocr = new ArrayList<Integer>();
	       
	        int lps[] = new int[M];
	        int j = 0;  
	        prefixTable(pat,M,lps);
	 
	        int i = 0;  
	        while (i < N)
	        {
	            if (pat.charAt(j) == txt.charAt(i))
	            {
	                j++;
	                i++;
	            }
	            if (j == M)
	            {
	                ocr.add(i-j);
	                j = lps[j-1];
	            }else if (i < N && pat.charAt(j) != txt.charAt(i))
	            {
	                
	            	if (j != 0)
	                    j = lps[j-1];
	                else
	                    i = i+1;
	            }
	        }
	        return ocr;
	    }
	    
	    public static int[] prefixTable(String pattern,int M,int lps[]) {
	    	
	    	int len = 0;
	    	int i = 1;
	    	lps[0] = 0;
	    	
	    	while(i < M) {
	    		if(pattern.charAt(i) == pattern.charAt(len)) {
	    			len++;
	    			lps[i]=len;
	    			i++;
	    		}else {
	    			if(len != 0) {
	    				len = lps[len-1];
	    			}else {
	    				lps[i] = len;
	    				i++;
	    			}
	    		}
	    	}
	    	
	    	return lps;
	    	
	    }   
}
